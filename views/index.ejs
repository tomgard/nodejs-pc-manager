<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thomases PC Control Panel</title>
    <style>
        body {
            background: #282828;
            margin: 0px 5px;
            padding: 0px;
        }
        h1, h2, h3, h4, h5{
            color: #36b5fb;
            margin: 0;
        }
        #terminal {
            width: 100%;
            height: calc(100vh - 100px);
            border: none;
            overflow-y: hidden;
            padding: 10px;
        }
        #inputLabel, #commandInput, #commandInput:focus, button {
            padding:5px;
            border: none;
            outline: none;
            margin: 0px;
        }
        .niceText, button {
            font-family: monospace;
            color: white;
            background: black;
        }
        button {
            margin: 0px 0px 0px 2px;
        }
        button:hover {
            cursor: pointer;

        }
    </style>
</head>
<body>
    <h3>Server Control Panel</h3>
    <div id="terminal" class="niceText"><%- output %></div>
    <label id="inputLabel" class="niceText">
        Tom >> 
        <input id="commandInput" class="niceText" placeholder="Enter command...">
    </label>
    <button>Send</button>
    <button command="shutdown /s /f /t 0">Restart</button>
    <script>
        var terminal = document.getElementById('terminal');
        var commandInput = document.getElementById('commandInput');
        var buttons = document.getElementsByTagName('button');

        commandInput.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                executeCommand(commandInput.value);
                commandInput.value = '';
            }
        });
        
        for (button of buttons) {
            button.addEventListener('click', function(event) {
                var command = button.getAttribute("command");
                if (command.length) {
                debugger;
                  commandInput.value = button.getAttribute("command");
                }
                executeCommand(commandInput.value);
                commandInput.value = '';
            });
        }
        
        function scrollTerminalToBottom() {
            terminal.scrollTop = terminal.scrollHeight;
        }
        
        window.onresize = function() {
            scrollTerminalToBottom();
        }

        window.onload = function() {
            scrollTerminalToBottom();
        };

        function executeCommand(command) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/execute?command=' + encodeURIComponent(command), true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var response = xhr.responseText;
                    appendToTerminal(response);
                }
            };
            xhr.send();
        }
        
        function htmlDecode(input) {
          var doc = new DOMParser().parseFromString(input, "text/html");
          return doc.documentElement.textContent;
        }

        function appendToTerminal(output) {
            terminal.innerText += htmlDecode(output) + '\n';
            terminal.scrollTop = terminal.scrollHeight;
        }
    </script>
</body>
</html>
